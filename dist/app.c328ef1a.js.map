{"version":3,"sources":["score.js","components/Block.js","components/Snake.js","components/Apple.js","directions.js","helpers.js","app.js"],"names":["score","addScore","bestScore","window","localStorage","getItem","Block","col","row","color","x","blockSize","y","ctx","fillStyle","fillRect","centerX","centerY","beginPath","arc","Math","PI","fill","block","Snake","segments","direction","map","segment","drawSquare","newDirection","head","leftCollision","topCollision","rightCollision","widthInBlock","bottomCollision","heightInBlock","wallCollision","selfCollision","collide","newHead","checkCollision","unshift","apple","position","move","pop","Apple","floor","random","drawCircle","randomCol","randomRow","directions","addEventListener","event","endGame","location","reload","keyCode","undefined","snake","setDirection","drawBorder","width","height","drawScore","font","textAlign","textBaseline","fillText","drawBestScore","saveBestScore","setItem","setSpeed","start","end","maxScore","delay","max","canvas","document","querySelector","getContext","gameOver","interval","cancelAnimationFrame","play","clearRect","draw","setTimeout","requestAnimationFrame","onload","TweenMax","set","opacity","tl1","TimelineMax","from","scale","top","left","ease","Back","easeOut","config"],"mappings":";;;;;;;AGAA,AFAA,ACAA,AEAA,AJAA,IAAIA,KAAK,GAAG,CAAZ,EACA;AMDA,ANEA;AGKA,ADAA,AEFA,IAAMsD,UAAU,GAAG;AEJnB,AFKI,MAAI,MADW;AFInB,AEFI,ACPJ,MDOQ,IAFW;AEHnB,AFMI,AJLJ,MIKQ,GJLCrD,IIEU,IJFnB,GAAoB;AIMhB,ACFJ,ALJsB,MIMd,YJNcD,KAAK,GAALA,KAAK,GAAI,CAAT;AMAtB,AFEmB,AJFe,CIElC,CJDA;AIQA,ACHA,ALJA,ICAMM;;;AKMN,ALLI,AIOJ,ALPA,IMKM2E,ANLA/E,MMKM,GAAGgF,ANLA,GAAG/E,CCAFI,GAAZ,CKKmB,CAAC4E,ALLH3E,ADAG,CAACJ,ECArB,EAAsB,QKKX,ANLG,CMKoB,ANLAC,OAApB,CMKH,ANL+B,CMK9C,UNLkB,KAA4C,CAA9D;AMMA,ALN0B,AGS1B,ACDA,ICFMQ,AHHAmC,ACMAF,GEHG,CFGC,CCDDkB,CCFGiB,CFGC,KEHK,CAACG,EDEnB,CDCMtC,ECDgB,EDCT,GEHD,CAAkB,IAAlB,CAAZ;AFGa,ACATjC,SDCJV,ECDQW,IDCF,CAACyC,ICDH,GAAgB,SDCpB,CAAwB,OCDpB,EDCJ,EAAmC,UAAUC,KAAV,EAAiB;AEHpD,ALNQ,AGUJ,IEJES,AJFAzC,IEMEiC,CEJG,ALNElD,GKMC0E,ALNN,GAAW1E,GKMC,ALNZ,CKMa0D,CFIjB,EAAa,EEJjB;AHHI,AFFI,AGUA9D,ACFJU,MDEIV,GHVKK,EIQLO,CJRA,AGUM,CAAC2C,EHVIlD,GAAX,CEEU,AEMd,CAAa,CDET,ACFJ,CDEoBmD,CCFJ,CAAhB,EAAmBM,EDEf,QCFJ,EAA0BtD,cAA1B;ACFJ,AHJkB,AFDb,AGUA,IELCuD,ALJF,MKIQ,GAAGe,MAAM,CAACf,MAAtB,EACA;AJHI,AGKArD,WAAIE,QHLU,AGKd,CAAa,CAAb,EAAgBmD,cAASvD,cAAzB,EAAoCsD,UAApC,EAA2CtD,cAA3C;AFNI,ADCU,AEQd,QAAMmB,CDTGe,QAAL,GAAgB,ACSF,GAAGS,CDTGhD,SCSO,CAACkD,IDTZ,CACZpC,ACQ6B,CAACwC,GDR1B,CAACX,GCQkB,CAA/B,CDRQ,CAAW7B,IAAI,CAAC8B,MAAL,MAAiBf,oBAAe,CAAhC,IAAqC,CAAhD,CADY,EAEZf,IAAI,CAAC6B,KAAL,CAAW7B,IAAI,CAAC8B,MAAL,MAAiBb,qBAAgB,CAAjC,IAAsC,CAAjD,CAFY,EAGZxB,QAHY,EAIZF,cAJY,CAAhB;AGKR,AHCK,AECDE,ICFEF,ODEEI,ECFO,GAAG,EAAlB,CDEI,CAAa,CAAb,EAAgB,CAAhB,EAAmBJ,cAAnB,EAA8BuD,WAA9B;AHLI,AEQJ,QAAIpC,CFRKL,QAAL,GAAgB,AEQJ,CFPR,IAAInB,AEOSuD,SAArB,EAAgC,GFPxB,CAAU,CAAV,EAAa,CAAb,CADY,EAEZ,IAAIvD,cAAJ,CAAU,CAAV,EAAa,CAAb,CAFY,EAGZ,IAAIA,cAAJ,CAAU,CAAV,EAAa,CAAb,CAHY,CAAhB;AIIR,AJCQ,AEIAwD,ACHJjD,ICFEsB,KJCOT,EGCLX,KCFU,CFKJgD,CFJN,CIDaE,ADEjB,CAAaA,CHDQ,GIDC,GAAGtD,CJCrB,CEIA,CAAmBmB,CHXZrB,EIQUE,GCFzB,ELNsB,IGWd,KCHJ,EAAgC,CAAhC,EAAmCA,cAAnC,EAA8CuD,WAA9C;AJPI,ACOH,AEIA,ACHJ,UJRaxD,CAAC,GAAG,KAAKH,GAAL,GAAWI,cAArB;AKMR,ALLQ,AGWP,GARD,CEEM0B,AFHO,MHFCzB,CAAC,GAAG,GKKC,ELLIJ,CKKD0D,ELLJ,GAAWvD,CKKD,CHAjB,EGAoBA,SAA/B,CLLQ;AEMA,AFLAE,AGCK,ACSb,CDTA,QCSSsD,EFLItB,IFLD/B,GIUZ,CFLQ,CAAcqC,CEKD,GJVb,GAAgB1C,GEKhB,CAAyB,CFLzB,KEKA;AGCR,AHAK,AEKDI,ICLA4C,OAAO,ADKHW,GCLM,CDKV,GAAW,CCLf,eDKI;ACDJ,ALTQvD,AIWJA,WAAIC,IJXIC,AGYG+B,KCDX,GJXI,AIWY,CJXCpC,CAAb,EAAgBE,ACKb,CDLH,EAAmBD,EIWvB,YJXI,EAA8BA,cAA9B;AACH,ACKG,AGMJE,WHNSY,AGML4C,QHNA,CAAc1C,AGMlB,GHNI,AGMY,CHNM,KGMtB,KHNsBC,OAAO;AAAA,AGO7Bf,WAAIyD,IHP6B1C,OAAO,CAACC,AGOzC,GAAmB,CFPZ,IEOP,EHPiC,CAAmB,SAAnB,CAAJ;ACCzB,ADDyB,OAAzB,GCCMuB,SAAS,GAAGhC,IAAI,CAAC6B,KAAL,CAAW7B,IAAI,CAAC8B,MAAL,MAAiBf,oBAAe,CAAhC,IAAqC,CAAhD,CAAlB;AACA,ADDH,AGODtB,UFNUwC,CEMNkB,QFNe,AEMnB,GFNsBnD,IAAI,CAAC6B,IFNhBxC,CEMW,CAAWW,IAAI,AEMdpB,CFNekD,AFNpB,MEMe,KEMjC,CFNkDf,EEMlBxB,cAAhC,EAA2CA,EFNsB,CAAhC,IAAqC,CAAhD,CAAlB,KEMJ;ACCJ,AHNQ,AFNA,AIYP,EAED,ECFMmD,KAAK,CLZG9C,CEMD6B,CGMC,IAAIrB,CLZG,EEMb,CFNiB,EEMD,GFNMjB,CEMFD,EFNH,EKYX,CLZsBK,CKYpC,QHNwB,CAAUyC,IFNV,GAAyBzC,EEMzB,EAAqB0C,SAArB,EAAgCxC,EFNK,CAArD,KEMgB,EAAqCF,cAArC,CAAhB;AACH,AFNG,UAAMM,OAAO,GAAI,KAAKT,GAAL,GAAWG,cAAZ,GAAyBA,iBAAY,CAArD;AKYR,ALXQE,IKWF+B,KAAK,GAAG,GLXF9B,CKWMkC,QLXV,GAAgBvC,GKWV,EAAd,ALXQ,CCGSqB,cAAc;AACvB,AGSR,SAAS0C,EHTI9C,SAAL,EGSR,CHTyBI,EGSA,UHTjB;AIQR,ALXQjB,ACIH,AGSDA,WAAIuD,IJbIlD,AIaR,GAAW,MJbP,UIaJ;AACAL,WAAIC,SAAJ,GAAgB,SAAhB;ACDJ,ALZQD,AIcJA,SCFKwE,EDEDhB,IJdIlD,EKYZ,CLZQ,CAAQH,CKYI,ADEhB,GAAgB,GJdZ,EAAiBC,CIcrB,MJdI,EAA0BN,iBAAY,CAAtC,EAAyC,CAAzC,EAA4CS,IAAI,CAACC,EAAL,GAAU,CAAtD,EAAyD,KAAzD;AKaJR,ADEAA,ECFAA,GAAG,CAACuD,IAAJ,CDEIE,ECFO,EHPAtB,QESX,GAAmB,GCFnB,EDEA,IHVejB,MAAM;AISrBlB,ALbIA,ACKA,EIQJA,GAAG,CAACC,SAAJ,ALbQQ,GKaQ,CLbZ,QKaJ;AACAT,ALbC,ACKG,AGSJA,ECDAA,GAAG,CAACwD,IJRMrC,CGSNuC,ICDJ,GAAgB,CDChB,IHTuB,GIQvB,AJR0BxC,IAAI,CAACxB,GAAL,EGSJL,GHTiB,CAAnC,YGSJ,GAAmCS,cAAnC,EAA8CA,iBAAY,CAA1D;ACAAE,AJRI,AGSP,ECDGA,ADGJ,GCHO,CAACyD,IJRMrC,QIQV,GAAmB,CJRG,GAAGF,IIQzB,AJR6B,CAACvB,GAAL,KAAa,CAAlC;AISJK,AJRI,EIQJA,GAAG,CAAC0D,IJRMrC,IIQV,CAAa,SJRW,EIQxB,CJR2BH,CIQDkC,GJRK,CAAC1D,CIQD,EJRJ,CIQO,CAAlC,EAAqC2D,CJRG/B,KIQG,GAAG,CAA9C,WJRuD,CAAnD;AISJ,AJRI,UAAMC,UIQVqB,KJRyB,EIQlB,CLfClC,ACOoBQ,EIQlB,EJRsB,CAACvB,CIQjC,CLfe,CCOa,KAAa6B,qBAAgB,CAArD;AISP,ALfO,ACQA,AGQR,SAASoC,CHRKnC,GDRC,KAAK/B,GAAL,CIgBf,CHR2B,EGQF,CJhBGgB,ACQES,KDRG,CAACzB,GAAnB,IAA0B,ACQE,IAAI0B,CDRDzB,GAAL,KAAae,GCQxB,EDR6B,CAACf,CCQG0B,EDRvD,YCQsB,IAAmDE,eAAzE;ADPH,ACQG,AGQJ,MAAIpC,IHRIuC,WGQIrC,EHRS,GAAG,KAApB,MGQJ,EAAuB;ACC3B,AJRQ,AGQAC,IAAAA,KCACmF,CDAK,CHRD7D,AGQErB,MCAf,EJRQ,CIQY,AJREuB,GAAd,AGQA,CHRkB,AGQE+C,OAApB,CAA4B,EHRV9C,OAAO,EAAI,AGQ7B,EAAyC5B,YAAzC;ACCJ,AJRQ,AGQP,MCAGyD,MJRQ1B,CIQZ,EAAa,CJRG,CAACS,OAAL,CAAaZ,OAAb,CAAJ,EAA2B;AIS/B,AJRQW,AGQf,EAED,QHVgBA,aAAa,GAAG,IAAhB;AISRpC,AJRK,IIQLA,MAAM,CAACoF,oBAAP,CAA4BC,IAA5B;AACA,AJRC,OAJD;AIaH,AJRG,AGQR,SAASb,IHRMpC,EDXAjC,EImBf,GAAoB,MHRQ,IAAIgC,aAAxB;AACH,AGQD,MAAMsC,KAAK,GAAG,EAAd;ACAA/D,ADCA,ECDAA,GAAG,CA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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["let score = 0;\r\n//creation de la fonction de modification de la variable score\r\n//A faire quand on a des export des variable car elle est immutable\r\nfunction addScore() { score += 1 }\r\n//initialisation du best score trouvé dans \r\n//localStorage\r\nconst bestScore = window.localStorage.getItem('bestScore') || 0;\r\n\r\nexport {\r\n    score,\r\n    bestScore,\r\n    addScore\r\n}","import {\r\n    ctx,\r\n    blockSize\r\n} from '../app'\r\n\r\nclass Block {\r\n    constructor(col, row) {\r\n        this.col = col;\r\n        this.row = row;\r\n    }\r\n    //création du block pour le snake\r\n    drawSquare(color) {\r\n        const x = this.col * blockSize;\r\n        const y = this.row * blockSize;\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(x, y, blockSize, blockSize);\r\n    }\r\n    drawCircle(color) {\r\n        const centerX = (this.col * blockSize) + blockSize / 2;\r\n        const centerY = (this.row * blockSize) + blockSize / 2;\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY, blockSize / 2, 0, Math.PI * 2, false);\r\n        ctx.fill();\r\n    }\r\n    collide(block) {\r\n        return this.col === block.col && this.row === block.row;\r\n    }\r\n}\r\n\r\nexport default Block","import {\r\n    widthInBlock,\r\n    heightInBlock,\r\n    gameOver,\r\n    apple\r\n} from '../app'\r\n\r\nimport { addScore } from '../score'\r\n\r\nimport Block from './Block'\r\n\r\nclass Snake {\r\n    constructor() {\r\n        this.segments = [\r\n            new Block(7, 5),\r\n            new Block(6, 5),\r\n            new Block(5, 5),\r\n        ];\r\n        this.direction = 'right';\r\n    }\r\n    draw() {\r\n        this.segments.map(segment => segment.drawSquare('#BADA55'));\r\n    }\r\n    setDirection(newDirection) {\r\n        this.direction = newDirection;\r\n    }\r\n\r\n    checkCollision(head) {\r\n        //collision avec les murs ( renvoi true si le serpent touche un mur)\r\n        const leftCollision = head.col === 0;\r\n        const topCollision = head.row === 0;\r\n        const rightCollision = head.col === widthInBlock - 1;\r\n        const bottomCollision = head.row === heightInBlock - 1;\r\n\r\n        const wallCollision = leftCollision || topCollision || rightCollision || bottomCollision;\r\n        let selfCollision = false;\r\n        this.segments.map(segment => {\r\n            if (head.collide(segment)) {\r\n                selfCollision = true;\r\n            }\r\n        })\r\n        return selfCollision || wallCollision;\r\n    }\r\n\r\n    move() {\r\n        const head = this.segments[0];\r\n        let newHead;\r\n        if (this.direction === 'right') {\r\n            newHead = new Block(head.col + 1, head.row);\r\n        }\r\n        else if (this.direction === 'left') {\r\n            newHead = new Block(head.col - 1, head.row);\r\n        }\r\n        else if (this.direction === 'up') {\r\n            newHead = new Block(head.col, head.row - 1);\r\n        }\r\n        else if (this.direction === 'down') {\r\n            newHead = new Block(head.col, head.row + 1);\r\n        }\r\n        if (this.checkCollision(newHead)) {\r\n            gameOver();\r\n            return;\r\n        }\r\n\r\n\r\n        //unshift: rajoute un élément au début du tableau\r\n        this.segments.unshift(newHead);\r\n        //transforme la pomme à la collision en tête de serpent pour le faire grandir\r\n        if (newHead.collide(apple.position)) {\r\n            addScore()\r\n            apple.move();\r\n        }\r\n        else {\r\n            this.segments.pop();\r\n        }\r\n        //pop: supprime le dernière élément d'un tableau\r\n\r\n    }\r\n\r\n}\r\nexport default Snake","import {\r\n    widthInBlock,\r\n    heightInBlock,\r\n    ctx,\r\n    blockSize\r\n} from '../app'\r\n\r\nimport Block from './Block'\r\n\r\nclass Apple {\r\n    constructor() {\r\n        this.position = new Block(\r\n            Math.floor(Math.random() * (widthInBlock - 2) + 1),\r\n            Math.floor(Math.random() * (heightInBlock - 2) + 1),\r\n            ctx,\r\n            blockSize\r\n        );\r\n    }\r\n    draw() {\r\n        this.position.drawCircle('#FB1');\r\n    }\r\n    move() {\r\n        const randomCol = Math.floor(Math.random() * (widthInBlock - 2) + 1);\r\n        const randomRow = Math.floor(Math.random() * (widthInBlock - 2) + 1);\r\n        this.position = new Block(randomCol, randomRow, ctx, blockSize);\r\n    }\r\n}\r\n\r\nexport default Apple","import {\r\n    endGame,\r\n    snake\r\n} from './app'\r\n\r\nconst directions = {\r\n    37: 'left',\r\n    38: 'up',\r\n    39: 'right',\r\n    40: 'down'\r\n};\r\n\r\n/**\r\n * Events\r\n */\r\nconst move = () => (\r\nwindow.addEventListener('keydown', function (event) {\r\n    if (endGame) {\r\n        window.location.reload();\r\n    }\r\n    const newDirection = directions[event.keyCode];\r\n    if (newDirection !== undefined) {\r\n        snake.setDirection(newDirection);\r\n    }\r\n})\r\n)\r\n\r\nexport default move","import {\r\n    ctx,\r\n    width,\r\n    height,\r\n    blockSize\r\n} from './app'\r\n\r\nimport { score, bestScore } from './score'\r\n\r\n/**\r\n * Les fonctions\r\n */\r\n\r\n//dessin du plateau\r\nfunction drawBorder() {\r\n    ctx.fillStyle = 'rgba(0,0,0,0.2)';\r\n    ctx.fillRect(0, 0, width, blockSize);\r\n    ctx.fillRect(0, height - blockSize, width, blockSize);\r\n    ctx.fillRect(0, 0, blockSize, height);\r\n    ctx.fillRect(width - blockSize, 0, blockSize, height);\r\n}\r\n\r\n\r\n\r\nfunction drawScore() {\r\n    ctx.font = '18px Monospace';\r\n    ctx.fillStyle = '#1d1d1d';\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'top';\r\n    ctx.fillText(`Score: ${score}`, blockSize, blockSize);\r\n}\r\n\r\n//Meilleur score\r\nfunction drawBestScore() {\r\n    ctx.font = '18px Monospace';\r\n    ctx.fillStyle = '#1d1d1d';\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'top';\r\n    ctx.fillText(`Best: ${bestScore}`, blockSize, blockSize * 3);\r\n}\r\n\r\n//Sauvegarde du meilleur score dans localStorage\r\nfunction saveBestScore() {\r\n    if (score > bestScore) {\r\n        window.localStorage.setItem('bestScore', score);\r\n    }\r\n}\r\n\r\n//speed\r\nfunction setSpeed() {\r\n    const start = 70;\r\n    const end = 16;\r\n    const maxScore = 15;\r\n    const delay = Math.floor(Math.max(start - (start - end) * score / maxScore, end));\r\n    return delay;\r\n}\r\n\r\nexport {\r\n    drawBorder,\r\n    drawScore,\r\n    drawBestScore,\r\n    saveBestScore,\r\n    setSpeed\r\n}\r\n","import Snake from './components/Snake'\r\nimport Apple from './components/Apple'\r\nimport move from './directions'\r\nimport {\r\n    drawBorder,\r\n    drawScore,\r\n    drawBestScore,\r\n    saveBestScore,\r\n    setSpeed\r\n} from './helpers'\r\n\r\nconst canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\nconst width = canvas.width;\r\nconst height = canvas.height;\r\n//definition de la grille\r\nconst blockSize = 10;\r\nconst widthInBlock = width / blockSize;\r\nconst heightInBlock = height / blockSize;\r\n\r\nlet endGame = false;\r\n\r\n\r\n\r\n/**\r\n * Les blocks\r\n */\r\n\r\n\r\n\r\nconst snake = new Snake();\r\nconst apple = new Apple();\r\nmove()\r\n\r\nfunction gameOver() {\r\n    ctx.font = '60px Monospace';\r\n    ctx.fillStyle = '#1d1d1d';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText('Game Over', width / 2, height / 2);\r\n    endGame = true;\r\n}\r\n\r\n\r\nfunction interval() {\r\n    if (endGame) {\r\n        saveBestScore();\r\n        window.cancelAnimationFrame(play);\r\n        return;\r\n    }\r\n    ctx.clearRect(0, 0, width, height);\r\n    snake.move();\r\n    snake.draw();\r\n    apple.draw();\r\n    drawScore();\r\n    drawBestScore();\r\n    drawBorder();\r\n    setTimeout(() => play = window.requestAnimationFrame(interval), setSpeed());\r\n}\r\n//Démarrer le jeu\r\nlet play = window.requestAnimationFrame(interval);\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    ctx,\r\n    width,\r\n    height,\r\n    blockSize,\r\n    widthInBlock,\r\n    heightInBlock,\r\n    gameOver,\r\n    apple,\r\n    endGame,\r\n    snake\r\n}\r\nwindow.onload = function () {\r\n    TweenMax.set('body', { opacity: 1 });\r\n    let tl1 = new TimelineMax();\r\n\r\n\r\n    tl1\r\n        .from('.title', 1.2, { delay: 0.1, scale: 0, top: \"50%\", left: \"50%\", opacity: 0, ease: Back.easeOut.config(1.7) })\r\n}"]}